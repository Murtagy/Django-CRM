{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Pylot-CRM It's a Django app which aims to be complete CRM solution for small and medium business. Architecture of CRM system pushes programmer and users to be effective! All logic which differs from standard Django is written in the docs. Parts of API not covered in the docs are to look in the code itself, here can be found explanation of models logic, views, permissions and business logic. Documentation is in progress. Some topics may still not be covered Ver 0.33","title":"Home"},{"location":"#welcome-to-pylot-crm","text":"It's a Django app which aims to be complete CRM solution for small and medium business. Architecture of CRM system pushes programmer and users to be effective! All logic which differs from standard Django is written in the docs. Parts of API not covered in the docs are to look in the code itself, here can be found explanation of models logic, views, permissions and business logic.","title":"Welcome to Pylot-CRM"},{"location":"#documentation-is-in-progress-some-topics-may-still-not-be-covered","text":"Ver 0.33","title":"Documentation is in progress. Some topics may still not be covered"},{"location":"customization/","text":"Coming soon! Customisation","title":"Customization"},{"location":"customization/#coming-soon","text":"Customisation","title":"Coming soon!"},{"location":"deployment/","text":"Coming soon! Deployment","title":"Depoyment"},{"location":"deployment/#coming-soon","text":"Deployment","title":"Coming soon!"},{"location":"layout/","text":"Coming soon! Layout of project mostly stays the same in models, urls, views and templates. Templates do have base.html, base footer and header. The page itself also splitted in separate templates. Please spend a couple of minutes to understand from which template each zone of the site is constructed.","title":"Layout"},{"location":"layout/#coming-soon","text":"Layout of project mostly stays the same in models, urls, views and templates. Templates do have base.html, base footer and header. The page itself also splitted in separate templates. Please spend a couple of minutes to understand from which template each zone of the site is constructed.","title":"Coming soon!"},{"location":"models/","text":"Models Models push some business logic throughout whole application. Base model doesnt have DB table (abstract model). It has more extended version BaseOwned model. Base model should be inherited for objects responsibility for which isn't supposed to be fixed on some employee. If you whould like to see responsible person for specific object (like an Order or a Deal) you should inherit object's model from BaseOwned. Client model suits the need to common place for all types of clients. It is needed to find common logic - like telephones, names of clients to be put in 1 db table and be found easily. However some additional thought process needed when you want to exclude some client type from a client's view. Because we want to see person responsible for communication with client we inherit Client model from BaseOwned All client's types should be inherited from Client. Activity model is a parent model for all acitvities types. All activities in CRM should be planned and tracked. So activity should have an owner (child of BaseOwned) and planned/fact dates.","title":"Data logic"},{"location":"models/#models","text":"Models push some business logic throughout whole application. Base model doesnt have DB table (abstract model). It has more extended version BaseOwned model. Base model should be inherited for objects responsibility for which isn't supposed to be fixed on some employee. If you whould like to see responsible person for specific object (like an Order or a Deal) you should inherit object's model from BaseOwned. Client model suits the need to common place for all types of clients. It is needed to find common logic - like telephones, names of clients to be put in 1 db table and be found easily. However some additional thought process needed when you want to exclude some client type from a client's view. Because we want to see person responsible for communication with client we inherit Client model from BaseOwned All client's types should be inherited from Client. Activity model is a parent model for all acitvities types. All activities in CRM should be planned and tracked. So activity should have an owner (child of BaseOwned) and planned/fact dates.","title":"Models"},{"location":"permissions/","text":"Coming soon! Permissions","title":"Access and restrictions"},{"location":"permissions/#coming-soon","text":"Permissions","title":"Coming soon!"},{"location":"user/","text":"Coming soon! User guide","title":"Employee"},{"location":"user/#coming-soon","text":"User guide","title":"Coming soon!"}]}